/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Document {
  version(): string
  metadata(): Record<string, string>
  permissions(): void
  signatures(): void
  pages(): Pages
}

export declare class ImageData {
  data: Uint8ClampedArray
  width: number
  height: number
}

export declare class Page {
  text(): string
  rect(): Rect
  paperSize(): PagerSize
  layout(): Orientation
  /** Returns `true` if this [`Page`] has orientation [`Orientation::Portrait`]. */
  isPortrait(): boolean
  /** Returns `true` if this [`Page`] has orientation [`Orientation::Landscape`]. */
  isLandscape(): boolean
  renderAsBytes(width: number, height: number, rotation?: Rotation | undefined | null): Buffer | null
  render(width: number, height: number, rotation?: Rotation | undefined | null): Uint8ClampedArray | null
  renderWithScale(scale: number): ImageData | null
}

export declare class PagerSize {
  layout(): Orientation
}

export declare class Pages {
  len(): number
  get(index: number): Page | null
}

export declare class Rect {
  top(): number
  right(): number
  bottom(): number
  left(): number
  width(): number
  height(): number
}

export declare class SqliteConnection {
  constructor(path: string)
  connect(): Promise<void>
  addBlob(key: string, blob: Uint8Array): Promise<void>
  getBlob(key: string): Promise<BlobRow | null>
  deleteBlob(key: string): Promise<void>
  getBlobKeys(): Promise<Array<string>>
  getUpdates(docId?: string | undefined | null): Promise<Array<UpdateRow>>
  deleteUpdates(docId?: string | undefined | null): Promise<void>
  getUpdatesCount(docId?: string | undefined | null): Promise<number>
  getAllUpdates(): Promise<Array<UpdateRow>>
  insertUpdates(updates: Array<InsertRow>): Promise<void>
  replaceUpdates(docId: string | undefined | null, updates: Array<InsertRow>): Promise<void>
  getServerClock(key: string): Promise<BlobRow | null>
  setServerClock(key: string, data: Uint8Array): Promise<void>
  getServerClockKeys(): Promise<Array<string>>
  clearServerClock(): Promise<void>
  delServerClock(key: string): Promise<void>
  getSyncMetadata(key: string): Promise<BlobRow | null>
  setSyncMetadata(key: string, data: Uint8Array): Promise<void>
  getSyncMetadataKeys(): Promise<Array<string>>
  clearSyncMetadata(): Promise<void>
  delSyncMetadata(key: string): Promise<void>
  initVersion(): Promise<void>
  setVersion(version: number): Promise<void>
  getMaxVersion(): Promise<number>
  close(): Promise<void>
  get isClose(): boolean
  static validate(path: string): Promise<ValidationResult>
  migrateAddDocId(): Promise<void>
  /**
   * Flush the WAL file to the database file.
   * See https://www.sqlite.org/pragma.html#pragma_wal_checkpoint:~:text=PRAGMA%20schema.wal_checkpoint%3B
   */
  checkpoint(): Promise<void>
}

export declare class Viewer {
  constructor()
  openWithId(id: string): Document | null
  open(id: string, bytes: Buffer, password?: string | undefined | null): Document | null
  close(id: string): boolean
}

export interface BlobRow {
  key: string
  data: Buffer
  timestamp: Date
}

export interface InsertRow {
  docId?: string
  data: Uint8Array
}

export declare function mintChallengeResponse(resource: string, bits?: number | undefined | null): Promise<string>

export declare const enum Orientation {
  Portrait = 0,
  Landscape = 1,
  Custom = 2
}

export declare const enum Rotation {
  Zero = 0,
  Quarter = 1,
  Half = 2,
  ThreeQuarters = 3
}

export interface UpdateRow {
  id: number
  timestamp: Date
  data: Buffer
  docId?: string
}

export declare const enum ValidationResult {
  MissingTables = 0,
  MissingDocIdColumn = 1,
  MissingVersionColumn = 2,
  GeneralError = 3,
  Valid = 4
}

export declare function verifyChallengeResponse(response: string, bits: number, resource: string): Promise<boolean>
